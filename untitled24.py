# -*- coding: utf-8 -*-
"""Untitled24.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14lz5bSfPvifM7Mvviq5ygmSFYBpsybQC
"""

import cv2
import keras
import numpy as np
import imageio
import os
from google.colab.patches import cv2_imshow

emotion_labels = ['Angry', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']
model_path = "/content/fer2013_mini_XCEPTION.119-0.65.hdf5"
cascade_path = "/content/cascade.xml"

face_cascade = cv2.CascadeClassifier(cascade_path)


model = keras.models.load_model(model_path)

video_path = "/content/sad.mp4"
video_capture = cv2.VideoCapture(video_path)


output_dir = "/content/output_frames"
os.makedirs(output_dir, exist_ok=True)

frame_counter = 0
while True:
    ret, frame = video_capture.read()

    if not ret:
        break


    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)


    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))


    for (x, y, w, h) in faces:
        face_roi = gray[y:y + h, x:x + w]
        face_roi = cv2.resize(face_roi, (48, 48))
        face_roi = face_roi.astype("float") / 255.0
        face_roi = np.expand_dims(face_roi, axis=0)
        face_roi = np.expand_dims(face_roi, axis=-1)

        emotion_prediction = model.predict(face_roi)[0]
        emotion_label = emotion_labels[np.argmax(emotion_prediction)]


        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
        cv2.putText(frame, emotion_label, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)


    output_file = os.path.join(output_dir, f'frame_{frame_counter}.jpg')
    cv2.imwrite(output_file, frame)

    frame_counter += 1

    cv2_imshow(frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break


video_capture.release()

cv2.destroyAllWindows()
output_video_path = "/content/output_video.mp4"
output_frames = sorted(os.listdir(output_dir))
output_images = [os.path.join(output_dir, frame) for frame in output_frames]
output_video = imageio.get_writer(output_video_path, fps=20)

for image in output_images:
    output_video.append_data(imageio.imread(image))

output_video.close()

print("Output video saved as", output_video_path)